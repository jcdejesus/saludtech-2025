/**
 * The CargoTracking context contains the domain model of the DDD Sample application with all its Aggregates:
 */
BoundedContext CargoTracking {
	Aggregate Cargo {
        owner CargoPlaner

		Entity Cargo {
			aggregateRoot
			- TrackingId trackingId
			- Location origin
			- RouteSpecification routeSpecification
			- Itinerary itinerary
			- Delivery delivery
		}
		ValueObject TrackingId {
			String id
		}
		ValueObject RouteSpecification {
			- Location origin
			- Location destination
			Date arrivalDeadline
		}
		ValueObject Delivery {
			- TransportStatus transportStatus
			- Location lastKnownLocation
			- Voyage currentVoyage
			boolean misdirected
			Date eta
			Date estimatedArrivalTime
			- HandlingActivity nextExpectedActivity
			boolean isUnloadedAtDestination
			- RoutingStatus routingStatus
			Date calculatedAt
			- HandlingEvent lastEvent
		}
		ValueObject HandlingActivity {
			Type handlingActivityType
			- Location location
			- Voyage voyage
		}
		ValueObject Itinerary {
			- List<Leg> legs
		}
		ValueObject Leg {
			- Voyage voyage
			- Location loadLocation
			- Location unloadLocation
			Date loadTime
			Date unloadTime
		}
		enum RoutingStatus {
			NOT_ROUTED, ROUTED, MISROUTED;
		}
		enum TransportStatus {
			NOT_RECEIVED, IN_PORT, ONBOARD_CARRIER, CLAIMED, UNKNOWN;
		}
	}
	Aggregate Location {
        owner Administrators

		Entity Location {
			aggregateRoot
			- UnLocode unLocode
			String name
		}
		ValueObject UnLocode {
			String unlocode
		}
	}
	Aggregate Handling {
        owner CargoTracker

		DomainEvent HandlingEvent {
			- HandlingEventType handlingEventType
			- Voyage voyage
			- Location location
			Date completionTime
			Date registrationTime
			- Cargo cargo
		}
		enum HandlingEventType {
			LOAD, UNLOAD, RECEIVE, CLAIM, CUSTOMS
		}
		ValueObject HandlingHistory {
			- List<HandlingEvent> handlingEvents
		}
	}
	Aggregate Voyage {
        owner VoyageManager

		Entity Voyage {
			aggregateRoot
			- VoyageNumber voyageNumber
			- Schedule schedule
		}
		ValueObject CarrierMovement {
			- Location departureLocation
			- Location arrivalLocation
			Date departureTime
			Date arrivalTime
		}
		ValueObject Schedule {
			- List<CarrierMovement> carrierMovements
		}
		ValueObject VoyageNumber {
			String number
		}
	}
}

BoundedContext CargoPlaner { type TEAM }
BoundedContext CargoTracker { type TEAM }
BoundedContext VoyageManager { type TEAM }
BoundedContext Administrators { type TEAM }

/* Use Cases (taken from Service Cutter examples) */
UseCase ViewTracking {
	interactions
		read "Cargo" with its "trackindId",
		read "HandlingEvent" with its "handlingEventType", "location", "completionTime",
		read "Delivery" with its "transportStatus", "estimatedArrivalTime", "misdirected", 
		read "Voyage" with its "voyageNumber",
		read "RouteSpecification" with its "destination"
}

UseCase ViewCargos {
	interactions
		read "Cargo" with its "trackingId",
		read "RouteSpecification" with its "destination", "arrivalDeadline",
		read "Delivery" with its "routingStatus"
}

UseCase BookCargo {
	interactions
		read "Location" with its "unLocode",
		update "Cargo" with its "trackingId",
		update "RouteSpecification" with its "origin", "arrivalDeadline", "destination"
}

UseCase ChangeCargoDestination {
	interactions
		read "Cargo" with its "trackingId",
		read "RouteSpecification" with its "destination",
		update "RouteSpecification" with its "destination"
}

UseCase RouteCargo {
	interactions
		read "Cargo" with its "trackingId",
		read "RouteSpecification" with its "destination", "origin", "arrivalDeadline",
		read "Location" with its "unLocode",
		read "Voyage" with its "voyageNumber",
		read "CarrierMovement" with its "departureLocation", "arrivalLocation", "departureTime", "arrivalTime",
		update "Leg" with its "loadLocation", "unloadLocation", "loadTime", "unloadTime"
}

UseCase CreateLocation {
	interactions
		create "Location" with its "unLocode", "name"
}

UseCase CreateVoyage {
	interactions
		create "Voyage" with its "voyageNumber"
}

UseCase AddCarrierMovement {
	interactions
		read "Voyage" with its "voyageNumber",
		create "CarrierMovement" with its "departureLocation", "arrivalLocation", "departureTime", "arrivalTime"
}

UseCase HandleCargoEvent {
	interactions
		read "Voyage" with its "voyageNumber",
		read "Cargo" with its "trackingId",
		update "HandlingEvent" with its "handlingEventType", "completionTime", "registrationTime", "location",
		update "Delivery" with its "transportStatus", "misdirected", "estimatedArrivalTime", "isUnloadedAtDestination", "routingStatus"
}
