/* This is an example input file for the 'Suspend Partnership' refactoring and shows a small part of the insurance example. */
ContextMap InsuranceContextMap {
	type = SYSTEM_LANDSCAPE
	state = TO_BE
	
	contains PolicyManagementContext
	contains RiskManagementContext

	/* With a right-click on the Partnership relationship ([P]<->[P]) you can execute the 'Suspend Partnership' 
	 * refactoring. On a dialog you can then choose between three modes how to suspend the partnership:
	 * a) Merge the two Bounded Contexts (executes 'AR-7 Merge Bounded Contexts').
	 * b) Extract a new Bounded Context for commonalities and establish upstream-downstream relationships between
	 *    the new and the existing two Bounded Contexts.
	 * c) Simply replace the Partnership relationship with an upstream-downstream relationship (in this case
	 *    you have to choose which Bounded Context becomes upstream context).
	 */
	RiskManagementContext [P]<->[P] PolicyManagementContext {
		implementationTechnology = "RabbitMQ"
	}

}

BoundedContext PolicyManagementContext implements PolicyManagementDomain {
	type = FEATURE
	domainVisionStatement = "This bounded context manages the contracts and policies of the customers."
	responsibilities = "Offers, Contracts, Policies"
	implementationTechnology = "Java, Spring App"
	
	Aggregate Offers {
		Entity Offer {
			aggregateRoot
			int offerId
			Customer client
			- List<Product> products
			BigDecimal price
		}
	}
	Aggregate Products {
		Entity Product {
			aggregateRoot
			- ProductId identifier
			String productName
		}
		ValueObject ProductId {
			int productId key
		}
	}
	Aggregate Contract {
		Entity Contract {
			aggregateRoot
			- ContractId identifier
			Customer client
			- List<Product> products
		}
		ValueObject ContractId {
			int contractId key
		}
		
		Entity Policy {
			int policyNr
			- Contract contract
			BigDecimal price
		}
	}
}

BoundedContext RiskManagementContext implements RiskManagementDomain {
	type = FEATURE
	domainVisionStatement = "Uses data from PolicyManagement context to calculate risks."
	responsibilities = "Customer Risk Calculation"
	implementationTechnology = "Java, Spring App"
	
	Aggregate Risks {
		Entity CustomerRiskFactor {
			aggregateRoot
			int totalRiskFactor
			- List<Risk> risks
			Customer client
		}
		ValueObject Risk {
			int likelihood
			String risk
		}
	}
}

/* Domain & Subdomain Definitions */
Domain InsuranceDomain {
	Subdomain PolicyManagementDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Subdomain managing contracts and policies."
	}
	Subdomain RiskManagementDomain {
		type = GENERIC_SUBDOMAIN
		domainVisionStatement = "Subdomain supporting everything which relates to risk management."
	}
}
