
/* Bounded Context CustomerManagement */

entity Customer {
	firstname String
	lastname String
}


entity Address {
	street String
	postalCode Integer
	city String
}

microservice Customer, Address with CustomerManagement

application {
	config {
		baseName CustomerManagement,
		packageName org.contextmapper.generated.customermanagement,
		applicationType microservice
		serverPort 8081
	}
	entities Customer, Address
}

/* Bounded Context CustomerSelfService */

entity CustomerAddressChange {
}


entity UserAccount {
	username String
}

microservice CustomerAddressChange, UserAccount with CustomerSelfService

application {
	config {
		baseName CustomerSelfService,
		packageName org.contextmapper.generated.customerselfservice,
		applicationType microservice
		serverPort 8082
	}
	entities CustomerAddressChange, UserAccount
}

/* Bounded Context Printing */

entity PrintingJob {
	printingId Integer
}


entity Document {
	source Blob
	template String
}


entity Template {
	templateId Integer
	templateName String
}

microservice PrintingJob, Document, Template with Printing

application {
	config {
		baseName Printing,
		packageName org.contextmapper.generated.printing,
		applicationType microservice
		serverPort 8083
	}
	entities PrintingJob, Document, Template
}

/* Bounded Context PolicyManagement */

entity Offer {
	offerId Integer
	price BigDecimal
}


entity Product {
	productName String
}


entity Contract {
}


entity Policy {
	policyNr Integer
	price BigDecimal
}

microservice Offer, Product, Contract, Policy with PolicyManagement

application {
	config {
		baseName PolicyManagement,
		packageName org.contextmapper.generated.policymanagement,
		applicationType microservice
		serverPort 8084
	}
	entities Offer, Product, Contract, Policy
}

/* Bounded Context RiskManagement */

entity CustomerRiskFactor {
	totalRiskFactor Integer
}

microservice CustomerRiskFactor with RiskManagement

application {
	config {
		baseName RiskManagement,
		packageName org.contextmapper.generated.riskmanagement,
		applicationType microservice
		serverPort 8085
	}
	entities CustomerRiskFactor
}

/* Bounded Context DebtCollection */

entity Debt {
	debtNr Integer
	creationDate LocalDate
	paymentDate LocalDate
	paymentDeadline LocalDate
	price BigDecimal
	status Blob
}


entity Dunning {
	dunningNr Integer
	dunningDate LocalDate
	paymentDeadline LocalDate
}

microservice Debt, Dunning with DebtCollection

application {
	config {
		baseName DebtCollection,
		packageName org.contextmapper.generated.debtcollection,
		applicationType microservice
		serverPort 8086
	}
	entities Debt, Dunning
}

/* relationships */
relationship OneToMany {
			Customer{addresses} to Address
			Offer{products} to Product
			Contract{products} to Product
			Debt{dunnigs} to Dunning
}
relationship OneToOne {
			CustomerAddressChange{issuer} to UserAccount
			PrintingJob{document} to Document
			PrintingJob{template} to Template
			Policy{contract} to Contract
}

/* microservice gateyway app */
application {
	config {
		baseName gateway,
		packageName org.contextmapper.generated.gateway,
		applicationType gateway
		serverPort 8080
	}
	entities Customer, Address, CustomerAddressChange, UserAccount, PrintingJob, Document, Template, Offer, Product, Contract, Policy, CustomerRiskFactor, Debt, Dunning
}

/* additional options */
dto * with mapstruct
service * with serviceImpl

